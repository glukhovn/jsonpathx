CREATE EXTENSION jsonpathx;
SELECT jsonpath_embed_vars('$.a + $a', '"aaa"');
 jsonpath_embed_vars 
---------------------
 ($."a" + $"a")
(1 row)

SELECT jsonpath_embed_vars('$.a + $a', '{"b": "abc"}');
 jsonpath_embed_vars 
---------------------
 ($."a" + $"a")
(1 row)

SELECT jsonpath_embed_vars('$.a + $a', '{"a": "abc"}');
 jsonpath_embed_vars 
---------------------
 ($."a" + "abc")
(1 row)

SELECT jsonpath_embed_vars('$.a + $a.double()', '{"a": "abc"}');
   jsonpath_embed_vars    
--------------------------
 ($."a" + "abc".double())
(1 row)

SELECT jsonpath_embed_vars('$.a + $a.x.double()', '{"a": {"x": -12.34}}');
ERROR:  cannot embed non-scalar jsonpath variables
SELECT jsonpath_embed_vars('$[*] ? (@ > $min && @ <= $max)', '{"min": -1.23, "max": 5.0}');
     jsonpath_embed_vars      
------------------------------
 $[*]?(@ > -1.23 && @ <= 5.0)
(1 row)

SELECT jsonpath_embed_vars(jsonpath_embed_vars('$[*] ? (@ > $min && @ <= $max)', '{"min": -1.23}'), '{"max": 5.0}');
     jsonpath_embed_vars      
------------------------------
 $[*]?(@ > -1.23 && @ <= 5.0)
(1 row)

CREATE TABLE testjsonb AS SELECT jsonb_build_object ('age', i % 100) j FROM generate_series(1, 10000) i;
CREATE INDEX jidx ON testjsonb USING gin (j jsonb_path_ops);
EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == 25');
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Seq Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == 25)'::jsonpath, '{}'::jsonb, false)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == 25', silent => true);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == 25)'::jsonpath, '{}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @@ '($."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == 25', vars => '{"age": 34 }', silent => true);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == 25)'::jsonpath, '{"age": 34}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @@ '($."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == $age', vars => '{"age": 25 }', silent => true);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == $"age")'::jsonpath, '{"age": 25}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @@ '($."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == $age', vars => '{"age": [25] }', silent => true);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Seq Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == $"age")'::jsonpath, '{"age": [25]}'::jsonb, true)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_match(j, '$.age == $x || $.age == $y', vars => '{"x": 25, "y": 34}', silent => true);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_match(j, '($."age" == $"x" || $."age" == $"y")'::jsonpath, '{"x": 25, "y": 34}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @@ '($."age" == 25 || $."age" == 34)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb t1, testjsonb t2 WHERE jsonb_path_match(t1.j, '$.age == $age', vars => t2.j, silent => true);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Nested Loop
   ->  Seq Scan on testjsonb t2
   ->  Bitmap Heap Scan on testjsonb t1
         Filter: jsonb_path_match(j, '($."age" == $"age")'::jsonpath, t2.j, true)
         ->  Bitmap Index Scan on jidx
               Index Cond: (j @@ jsonpath_embed_vars('($."age" == $"age")'::jsonpath, t2.j))
(6 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == 25)');
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Seq Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == 25)'::jsonpath, '{}'::jsonb, false)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == 25)', silent => true);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == 25)'::jsonpath, '{}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @? '$?(@."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == 25)', vars => '{"age": 34 }', silent => true);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == 25)'::jsonpath, '{"age": 34}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @? '$?(@."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == $age)', vars => '{"age": 25 }', silent => true);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == $"age")'::jsonpath, '{"age": 25}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @? '$?(@."age" == 25)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == $age)', vars => '{"age": [25] }', silent => true);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Seq Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == $"age")'::jsonpath, '{"age": [25]}'::jsonb, true)
(2 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb WHERE jsonb_path_exists(j, '$ ? (@.age == $x || $.age == $y)', vars => '{"x": 25, "y": 34}', silent => true);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on testjsonb
   Filter: jsonb_path_exists(j, '$?(@."age" == $"x" || $."age" == $"y")'::jsonpath, '{"x": 25, "y": 34}'::jsonb, true)
   ->  Bitmap Index Scan on jidx
         Index Cond: (j @? '$?(@."age" == 25 || $."age" == 34)'::jsonpath)
(4 rows)

EXPLAIN (COSTS OFF)
SELECT * FROM testjsonb t1, testjsonb t2 WHERE jsonb_path_exists(t1.j, '$ ? (@.age == $age)', vars => t2.j, silent => true);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Nested Loop
   ->  Seq Scan on testjsonb t2
   ->  Bitmap Heap Scan on testjsonb t1
         Filter: jsonb_path_exists(j, '$?(@."age" == $"age")'::jsonpath, t2.j, true)
         ->  Bitmap Index Scan on jidx
               Index Cond: (j @? jsonpath_embed_vars('$?(@."age" == $"age")'::jsonpath, t2.j))
(6 rows)

DROP EXTENSION jsonpathx;
ERROR:  cannot drop function jsonb_path_match(jsonb,jsonpath,jsonb,boolean) because it is required by the database system
